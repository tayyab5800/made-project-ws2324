// Creating pipeline
pipeline GtfsPipeline {

    GTFSFeedExtractor
        -> ZipArchiveInterpreter
        -> StopsFilePicker 
        -> StopsTextFileInterpreter
        -> StopsCSVInterpreter 
        -> StopsColumnDeleter
        -> StopsTableInterpreter 
        -> StopsLoader;

    // Extracting data from source
    // None to File
    block GTFSFeedExtractor oftype HttpExtractor {
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }

    // File to FileSystem
    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // FileSystem to File
    block StopsFilePicker oftype FilePicker {
        path: "/stops.txt";
    }

    // File to TextFile
    block StopsTextFileInterpreter oftype TextFileInterpreter { 
        encoding: "utf8"; 
    }

    // TextFile to Sheet
    block StopsCSVInterpreter oftype CSVInterpreter { enclosing: '"'; }

    // Sheet to Sheet
    block StopsColumnDeleter oftype ColumnDeleter { 
        delete: [
            column B, 
            column D, 
            column H, 
            column I, 
            column J, 
            column K, 
            column L,
            ]; 
    }

    // Sheet to Table
    block StopsTableInterpreter oftype TableInterpreter {
        header: true;
        columns:[
            "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype geo,
            "stop_lon" oftype geo,
            "zone_id" oftype zone
        ];
    }

    // defining lower and upper bound values
    constraint GeoCoordinate oftype RangeConstraint { 
        lowerBound: -90; 
        lowerBoundInclusive: true; 
        upperBound: 90; 
        upperBoundInclusive: true;
    }

    // defining geo data type 
    valuetype geo oftype decimal { 
        constraints: [ GeoCoordinate ]; 
    }

    // filtering zone
    constraint AllowedZone on integer:
        value == 2001;
    
    // defining zone data type
    valuetype zone oftype integer { 
        constraints: [ AllowedZone ]; 
    }

    block StopsLoader oftype SQLiteLoader { 
        table: "stops"; 
        file: "./gtfs.sqlite"; 
    }

}